// Find the intersection point of two Sorted Linked Lists
// (Using difference of lengths)

class Misc {

    // Creation of node class
    static class Node {
        int data;
        Node next;
    }
    
    
    // Utility Function to count the length of linked lists
    public int getcount(Node temp) {
        Node node = temp;
        int count = 0;
        while (node != null) {
            count++;
            node = node.next;
        }
        return count;

    }

    // Function to find the intersection point
    public int intersectionPoint(Node root1, Node root2) {

        // Initialise two nodes ptr1 and ptr2
        Node ptr1, ptr2;
        ptr1 = root1;
        ptr2 = root2;

        // find the difference
        int d = getcount(root1) - getcount(root2);

        // If it is positive means list1 is bigger so advance ptr1 till it
        // reaches a point where ptr1 and ptr2 are at the same point
        if (d > 0) {
            for (int i = 0; i < d; i++) {
                if (ptr1 == null) {
                    return -1;
                }
                ptr1 = ptr1.next;
            }

            // else list2 is bigger thus do the above step for ptr2
        } else if (d < 0) {
            for (int i = 0; i < Math.abs(d); i++) {

                if (ptr2 == null) {
                    return -1;
                }
                ptr2 = ptr2.next;
            }
        }

        // When both pointers are at the same point check for
        // a point where both have same address (intersection point) 
        // so return the data at that point
        while (ptr1 != null && ptr2 != null) {
            if (ptr1 == ptr2)
                return ptr1.data;
            ptr1 = ptr1.next;
            ptr2 = ptr2.next;
        }
        
        // else not found
        return -1;
    }


    // Utility Function for printing the list
    public void PrintList(Node ptr) {
        Node temp = ptr;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.print("Null");
    }


    // Driver code
    public static void main(String[] args) {

        Misc list = new Misc();
        Node newNode;

        Node head1 = new Node();
        Node head2 = new Node();

        head1.data = 10;
        head2.data = 3;

        newNode = new Node();
        newNode.data = 6;
        head2.next = newNode;

        newNode = new Node();
        newNode.data = 9;
        head2.next.next = newNode;

        newNode = new Node();
        newNode.data = 15;
        head1.next = newNode;
        head2.next.next.next = newNode;

        newNode = new Node();
        newNode.data = 30;
        
        // Making intersection
        head1.next.next = newNode;

        head1.next.next.next = null;
        System.out.println("List 1:");
        list.PrintList(head1);
        System.out.println();

        System.out.println("List 2:");
        list.PrintList(head2);

        System.out.println();
        System.out.println("Intersection point:");

        System.out.println(list.intersectionPoint(head1, head2));

    }

}

// Time Complexity : O(M+N)
// where m and n are the lengths of list 1 and 2 respectively.
// Space Complexity : O(1)
