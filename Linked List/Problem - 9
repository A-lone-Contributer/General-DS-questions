// To remove Duplicates from a Unsorted List

import java.util.HashSet;

class Misc {

    // Reference of Node
    Node head;

    // Creation of node class
    static class Node {
        int data;
        Node next;

        // Node constructor for initialisation of data and next
        Node(int data) {
            this.data = data;
            next = null;
        }
    }

    // Function for inserting in linked list (at the start)
    public void push(int data) {

        Node new_node = new Node(data);
        new_node.next = head;
        head = new_node;
    }

    // Utility Function for printing the list
    public void PrintList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }

    // Function to delete duplicates
    public void deleteDuplicate() {

        // Create a HashSet
        HashSet<Integer> set = new HashSet<Integer>();

        // Initialise a curr ptr pointing to head
        Node curr = head;

        // Initialise a prev ptr pointing to null
        Node prev = null;

        // while curr is not null
        while (curr != null) {

            // If set doesn't have the curr node data
            if (!set.contains(curr.data)) {

                // Add it to the set
                set.add(curr.data);

                // Make the current node as previous
                prev = curr;

                // Move the curr ptr
                curr = curr.next;
            } else {

                // else there is a duplicate so make the current node's next as previous node's next
                prev.next = curr.next;

                // Move the curr ptr
                curr = curr.next;
            }
        }
    }

    // Driver code
    public static void main(String[] args) {
        Misc ll = new Misc();
        ll.push(11);
        ll.push(10);
        ll.push(10);
        ll.push(11);
        ll.push(11);
        System.out.println("Original List:");
        ll.PrintList();
        System.out.println();
        ll.deleteDuplicate();
        System.out.println("List with Duplicates removed:");
        ll.PrintList();
    }
}


// Time Complexity : O(N)
// Space Complexity : O(1) 
