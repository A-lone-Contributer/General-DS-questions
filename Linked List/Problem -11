// To swap nodes of a Linked List (Do not swap the data)

class Misc {

    // Reference of Node
    Node head;

    // Creation of node class
    static class Node {
        int data;
        Node next;

        // Node constructor for initialisation of data and next
        Node(int data) {
            this.data = data;
            next = null;
        }
    }

    // Function for inserting in linked list (at the start)
    public void push(int data) {

        Node new_node = new Node(data);
        new_node.next = head;
        head = new_node;
    }

    // Utility Function for printing the list
    public void PrintList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.print("Null");
    }

    // Function to swap the nodes
    public void swap(int x, int y) {

        // Make references
        Node prev = null;
        Node curr = head;
        Node nodeA = null;
        Node nodeB = null;
        Node prevA = null;
        Node prevB = null;

        // If the data is same or the head is null
        if (x == y || head == null)
            return;

        // Till current is not null
        while (curr != null) {

            // if data is equal to x
            if (curr.data == x) {

                // make nodeA current and prevA prev
                nodeA = curr;
                prevA = prev;

            }

            // if data is equal to y
            else if (curr.data == y) {

                // make nodeB current and prevB prev
                nodeB = curr;
                prevB = prev;
            }

            // Make the curr as prev and move current on each iteration
            prev = curr;
            curr = curr.next;
        }

        // If the either of the node is node found then simply return
        if (nodeA == null || nodeB == null) {
            return;
        }

        // If node is present and previous of nodeA is not null i.e A is not the head
        if (prevA != null) {

            // Make the next of prevA point to nodeB
            prevA.next = nodeB;
        }

        // If node A is head
        else {

            // Make nodeB the new head
            head = nodeB;
        }

        // Repeat the above steps for nodeB accordingly
        if (prevB != null) {
            prevB.next = nodeA;
        } else {
            head = nodeA;
        }

        // After talking care of prev we have to swap the next pointers of both node A and B
        Node temp = nodeA.next;
        nodeA.next = nodeB.next;
        nodeB.next = temp;

    }


    // Driver code
    public static void main(String[] args) {
        Misc ll = new Misc();
        ll.push(3);
        ll.push(50);
        ll.push(2);
        ll.push(1);
        ll.push(20);
        ll.push(10);
        System.out.println("Original List:");
        ll.PrintList();
        System.out.println();
        System.out.println("After Swapping:");
        ll.swap(50, 3);
        ll.PrintList();


    }
}


// Time Complexity : O(N)
// Space Complexity : O(1)
