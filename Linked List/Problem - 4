// To find the middle element of a linked list

public class Middle {

    // Reference of Node 
    Node head;

    // Creation of node class
    static class Node {
        int data;
        Node next;

        // Node constructor for initialisation of data and next
        Node(int data) {
            this.data = data;
            next = null;

        }
    }

    // Function for inserting in linked list (at the start)
    public void push(int data) {

        Node new_node = new Node(data);
        new_node.next = head;
        head = new_node;
    }

    // Function to find the middle element( Hare and Tortoise Technique)
    public int middle() {

        // Initialise slow_ptr and fast_ptr with head
        Node slow_ptr = head;
        Node fast_ptr = head;

        // Now till fast_ptr reaches null as well as its next is null
        while (fast_ptr != null && fast_ptr.next != null) {

            // Move slow_ptr once
            slow_ptr = slow_ptr.next;

            // Move fast_ptr with double the speed so that it reaches end and slow pointer reaches middle
            fast_ptr = fast_ptr.next.next;
        }

        // return the slow_ptr data which is the middle element
        return slow_ptr.data;
    }

    // Driver code 
    public static void main(String[] args) {
        Middle ll = new Middle();
        ll.push(5);
        ll.push(7);
        ll.push(8);
        ll.push(9);
        ll.push(11);

        System.out.println("The middle element of the linked list is : " + ll.middle());
    }

}

// Time Complexity : O(N/2)
// Space Complexity : O(1)
