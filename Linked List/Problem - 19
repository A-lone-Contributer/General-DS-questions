// Merge two sorted lists in reverse order

public class Misc {

    // Creation of node class
    static Node head1, head2;

    static class Node {
        int data;
        Node next;

        Node(int d) {
            this.data = d;
            this.next = null;
        }
    }

    // Utility function to print the List
    void printList(Node n) {
        while (n != null) {
            System.out.print(n.data);
            System.out.print("->");
            n = n.next;
        }
        System.out.println("Null");
    }

    // Function to merge in reversed order
    public Node mergeReverse(Node node1, Node node2) {

        // to store the resultant list
        Node result = null;

        // while there are elements in both lists
        while (node1 != null && node2 != null) {

            // compare the data and if the data in node 2 is bigger or equal
            if (node1.data <= node2.data) {

                // join node 1 to the result
                Node temp = node1.next;
                node1.next = result;
                result = node1;
                node1 = temp;

            } else {

                // else join node 2
                Node temp = node2.next;
                node2.next = result;
                result = node2;
                node2 = temp;
            }
        }

        // if there are elements still left in first list
        if (node1 != null) {

            // join the node 1 at the start
            Node temp = node1.next;
            node1.next = result;
            result = node1;
            node1 = temp;
        }

        // if there are elements left in second list
        if (node2 != null) {
            Node temp = node2.next;
            node2.next = result;
            result = node2;
            node2 = temp;

        }

        // return the result
        return result;
    }


    // Driver code
    public static void main(String[] args) {
        Misc list = new Misc();

        head1 = new Node(5);
        head1.next = new Node(10);
        head1.next.next = new Node(15);

        head2 = new Node(2);
        head2.next = new Node(3);
        head2.next.next = new Node(20);

        System.out.println("First list :");
        list.printList(head1);

        System.out.println("Second list :");
        list.printList(head2);

        Node result = list.mergeReverse(head1, head2);

        System.out.println("Merged list : ");
        list.printList(result);


    }
}
// Time Complexity : O(N)
// Space Complexity : O(1)
