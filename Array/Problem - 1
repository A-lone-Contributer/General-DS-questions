// Find the Majority Element in an array (Moore's Voting Algorithm)

class Misc {

    // helper function to find the candidate for 
    // a majority element
    static int majorityElement(int[] arr) {
        
        // keeps a check of count of occurrence of majority element 
        int count = 0; 
        
        // keeps a check of index of majority element 
        int majorityIndex = 0;
        
        // if the current majorityIndex element is 
        // encountered then increment count (vote)
        // else decrement (downvote)
        for (int i = 0; i < arr.length; i++) {
            if (arr[majorityIndex] == arr[i]) {
                count += 1;
            } else {
                count--;
            }

            // if the count is 0 then reset both count and
            // index 
            if (count == 0) {
                majorityIndex = i;
                count = 1;
            }
        }
        return arr[majorityIndex];
    }

    // function to check if the number candidate found
    // indeed is a majority element
    static boolean isMajorityElement(int[] arr) {
        int count = 0;
        int majority = majorityElement(arr);
        for (int value : arr) {
            if (value == majority) {
                count++;
            }
        }

        return count > arr.length / 2;
    }

    // Driver Code
    public static void main(String[] args) {
        int[] arr = {3, 4, 2, 1, 1, 9, 1, 1, 1};
        int candidate = majorityElement(arr);
        if (isMajorityElement(arr)) {
            System.out.print("Majority Element is :" + candidate);
        } else {
            System.out.print("No majority Element");
        }
    }
}

// Time Complexity : O(n) (Average Case)
// Space Complexity : O(1)
