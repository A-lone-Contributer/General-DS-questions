// Count unique integers in every window of k size

import java.util.HashMap;

public class DSA {

    public static void countDistinct(int[] arr, int k){

        // create a hashmap
        HashMap<Integer, Integer> map = new HashMap<>();

        // push first k elements to the map and increase the count if
        // present else put 0
        for(int i=0;i<k; i++)
            map.put(arr[i], map.getOrDefault(arr[i], 0)+1);

        // print the size for initial window
        System.out.print(map.size()+" ");

        for(int i=k; i<arr.length; i++) {

            // now we will slide the window the count of last element of
            // previous window is 1 then remove it from the hashmap
            if (map.get(arr[i - k]) == 1)
                map.remove(arr[i - k]);
            else

                // else put it and decrease its count
                map.put(arr[i - k], map.get(arr[i - k]) - 1);

            // push elements onto the map
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);

            // print size
            System.out.print(map.size()+" ");
        }
    }
    public static void main(String[] args) {
        int[] arr = { 1, 2, 1, 3, 4, 2, 3 };
        int k = 4;
        countDistinct(arr, k);
    }
}

// Time Complexity : O(n)
// Space Complexity : O(n)
